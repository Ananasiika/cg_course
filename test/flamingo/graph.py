import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Исходные данные
frame_time = np.array([[325.04, 347.562, 359.622, 374.705, 386.948, 401.118, 414.805, 431.992, 493.04, 496.762, 509.95, 522.278, 539.571, 556.383, 570.041],
                      [483.8, 515.552, 536.262, 564.41, 581.216, 646.689, 682.748, 703.39, 722.936, 757.037, 775.841, 804.074, 847.923, 887.557, 910.32],
                      [612.4, 704.496, 767.9, 797.116, 818.725, 855.869, 932.195, 917.808, 1045.51, 1084.02, 1184.6, 1152.9, 1185.88, 1212.68, 1250.13],
                      [951.4, 979.096, 1041.52, 1081.74, 1118.27, 1148.33, 1182.57, 1246.54, 1279.62, 1292.98, 1353.12, 1418.92, 1444.88, 1494.04, 1532.452],
                      [1169.04, 1196.68, 1232.87, 1268.95, 1428.08, 1318.48, 1425.22, 1537.09, 1544.96, 1568.52, 1577.66, 1746.19, 1738.25, 1747.57, 1790.42],
                      [1248.68, 1304.91, 1349.08, 1396.44, 1457.22, 1509.89, 1569.4, 1639.82, 1685.39, 1730.46, 1783.34, 1824.53, 1881.78, 1921.89, 1979.87],
                      [1539.35, 1603.49, 1625.62, 1651.1, 1702.88, 1765.72, 1830.79, 1889.27, 1952.49, 2046.66, 2084.91, 2126.68, 2209.03, 2265.88, 2312.32],
                      [1734.08, 1740, 1782.72, 1860.19, 1914.93, 1981.04, 2054.04, 2154.76, 2224.71, 2273.11, 2339.2, 2492.73, 2558.71, 2635.27, 2698.32],
                      [1789.25, 1885.53, 2016.54, 2185.9, 2275.28, 2318.69, 2387.47, 2416.02, 2554.56, 2614.62, 2796.38, 2862.62, 3029.14, 3113.45, 3212.42],
                      [1889.84, 1964.71, 2248.63, 2290.31, 2474.13, 2533.13, 2628.57, 2733.74, 2762.11, 2881.96, 2961.88, 3088.4, 3213.9, 3297.44, 3354.23]])

x = np.arange(1, 16)
y = np.arange(1, 11)
X, Y = np.meshgrid(x, y)

F = frame_time.flatten()

A = np.column_stack([Y.flatten() * Y.flatten(), X.flatten() * X.flatten(), X.flatten() * Y.flatten(), Y.flatten(), X.flatten(), np.ones_like(F)])

parameters = np.linalg.lstsq(A, F, rcond=None)[0]

a, b, c, d, e, f = parameters

# Вывод коэффициентов
print("Коэффициенты:")
print("a =", a)
print("b =", b)
print("c =", c)
print("d =", d)
print("e =", e)
print("f =", f)

# Вид функции
print("\nВид функции:")
print('f(x, y) = {:.4f} * y^2 + {:.4f} * x^2 + {:.4f} * x * y + {:.4f} * y + {:.4f} * x + {:.4f}'.format(a, b, c, d, e, f))

# Создание сетки для построения графика
xx, yy = np.meshgrid(np.linspace(1, 15, 100), np.linspace(1, 10, 100))
approx_function = a * yy ** 2 + b * xx ** 2 + c * xx * yy + d * yy + e * xx + f

# Построение графика
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X, Y, F, c='b', marker='o', label='Исходные точки')  # Исходные точки
ax.plot_surface(xx, yy, approx_function, color='g', label='Аппроксимация')  # Аппроксимационная поверхность
ax.set_xlabel('Количество фламинго')
ax.set_ylabel('Количество источников света')
ax.set_zlabel('Время отрисовки кадра')
plt.show()



# import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
# import numpy as np

# # Данные
# flamingo_count = np.arange(1, 16)       # Количество фламинго
# source_count = np.arange(1, 11)         # Количество источников
# frame_time = np.array([[325.04, 347.562, 359.622, 374.705, 386.948, 401.118, 414.805, 431.992, 493.04, 496.762, 509.95, 522.278, 539.571, 556.383, 570.041],
#                       [483.8, 515.552, 536.262, 564.41, 581.216, 646.689, 682.748, 703.39, 722.936, 757.037, 775.841, 804.074, 847.923, 887.557, 910.32],
#                       [612.4, 704.496, 767.9, 797.116, 818.725, 855.869, 932.195, 917.808, 1045.51, 1084.02, 1184.6, 1152.9, 1185.88, 1212.68, 1250.13],
#                       [951.4, 979.096, 1041.52, 1081.74, 1118.27, 1148.33, 1182.57, 1246.54, 1279.62, 1292.98, 1353.12, 1418.92, 1444.88, 1494.04, 1532.452],
#                       [1169.04, 1196.68, 1232.87, 1268.95, 1428.08, 1318.48, 1425.22, 1537.09, 1544.96, 1568.52, 1577.66, 1746.19, 1738.25, 1747.57, 1790.42],
#                       [1248.68, 1304.91, 1349.08, 1396.44, 1457.22, 1509.89, 1569.4, 1639.82, 1685.39, 1730.46, 1783.34, 1824.53, 1881.78, 1921.89, 1979.87],
#                       [1539.35, 1603.49, 1625.62, 1651.1, 1702.88, 1765.72, 1830.79, 1889.27, 1952.49, 2046.66, 2084.91, 2126.68, 2209.03, 2265.88, 2312.32],
#                       [1734.08, 1740, 1782.72, 1860.19, 1914.93, 1981.04, 2054.04, 2154.76, 2224.71, 2273.11, 2339.2, 2492.73, 2558.71, 2635.27, 2698.32],
#                       [1789.25, 1885.53, 2016.54, 2185.9, 2275.28, 2318.69, 2387.47, 2416.02, 2554.56, 2614.62, 2796.38, 2862.62, 3029.14, 3113.45, 3212.42],
#                       [1889.84, 1964.71, 2248.63, 2290.31, 2474.13, 2533.13, 2628.57, 2733.74, 2762.11, 2881.96, 2961.88, 3088.4, 3213.9, 3297.44, 3354.23]])


# fig = plt.figure()
#ax = fig.add_subplot(111, projection='3d')


#X, Y = np.meshgrid(source_count, flamingo_count)  
# ax.plot_surface(X, Y, frame_time.T)  

#ax.contour(X, Y, frame_time.T)
# ax.contourf(X, Y, frame_time.T)


#ax.set_xlabel('Количество источников')
#ax.set_ylabel('Количество фламинго')
#ax.set_zlabel('Время отрисовки кадра')

#ax.view_init(elev=90, azim=0) # вывод в проекции на ось OZ (вид сверху)

#ax.set_zticks([])  # Удаление числовых значений по оси OZ

# plt.show()

# array_flams = [ 325.04 ,  347.562,  359.622,  374.705,  386.948,  401.118,
#         414.805,  431.992,  493.04 ,  496.762,  509.95 ,  522.278,
#         539.571,  556.383,  570.041]
        
# array_lights = [325.04, 483.8 , 612.4 , 951.4 , 1169.04, 1248.68, 1539.35, 1734.08, 1789.25, 1889.84]

# import numpy as np
# import matplotlib.pyplot as plt

# x = np.arange(1, 16)
# y = np.array([ 325.04, 347.562, 359.622, 374.705, 386.948, 401.118,
#         414.805, 431.992, 493.04 , 496.762, 509.95 , 522.278,
#         539.571, 556.383, 570.041])

# coeffs = np.polyfit(x, y, deg=2)
# coeffs_rounded = np.round(coeffs, 4)

# # Вывод аппроксимированной функции
# print('Функция:')
# print('f(x) = {:.4f}x^2 + {:.4f}x + {:.4f}'.format(coeffs_rounded[0], coeffs_rounded[1], coeffs_rounded[2]))

# # Построение графика
# xx = np.linspace(1, 15, 100)
# yy = np.polyval(coeffs, xx)

# plt.plot(x, y, 'bo', label="Исходные данные")
# plt.plot(xx, yy, 'r-', label="Аппроксимация")

# plt.xlabel('Количество фламинго')
# plt.ylabel('Время')
# plt.legend()
# plt.show()



